
@{
    ViewBag.Title = "Analytics API - Channel Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .customers {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

        .customers td, #customers th {
            border: 1px solid #ddd;
            padding: 8px;
        }

        .customers tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .customers tr:hover {
            background-color: #ddd;
        }

        .customers th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #ff92a3;
            color: white;
        }
    .loader {
        border: 16px solid #f3f3f3;
        border-radius: 50%;
        border: 16px solid red;
        padding-top: 10%;
        width: 200px;
        height: 200px;
        -webkit-animation: spin 2s linear infinite;
        animation: spin 2s linear infinite;
    }
</style>
<script src="https://apis.google.com/js/platform.js" async defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js" type="text/javascript"></script>
<script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
<script src="https://apis.google.com/js/api.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script>
        //window.onload = function () {
        //    setInitialDates();
        //    loadClient().then(getDataFromAPI);
        //    //authenticate().then(loadClient).then(getDataFromAPI);
        //}
        //function authenticate() {
        //    return gapi.auth2.getAuthInstance()
        //        .signIn({scope: "https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/yt-analytics-monetary.readonly https://www.googleapis.com/auth/yt-analytics.readonly" })
        //        .then(function () {console.log("Sign-in successful"); },
        //            function (err) {console.error("Error signing in", err); });
        //}
        //function loadClient() {
        //    return gapi.client.load("https://youtubeanalytics.googleapis.com/$discovery/rest?version=v2")
        //        .then(function () {console.log("GAPI client loaded for API"); userLoaded = true; },
        //            function (err) {console.error("Error loading GAPI client for API", err); userLoaded = false; });
        //}
        // Make sure the client is loaded and sign-in is complete before calling this method.
        //gapi.load("client:auth2", function () {
        //    gapi.auth2.init({ client_id: '' });
        //});

        var OAUTH2_CLIENT_ID = '';
        var OAUTH2_SCOPES = [
            'https://www.googleapis.com/auth/youtubepartner',
            'https://www.googleapis.com/auth/youtube',
            'https://www.googleapis.com/auth/youtube.readonly',
            'https://www.googleapis.com/auth/yt-analytics-monetary.readonly',
            'https://www.googleapis.com/auth/yt-analytics.readonly'
        ];

        googleApiClientReady = function () {
            setInitialDates();
            gapi.auth.init(function () {
                window.setTimeout(checkAuth, 1);
            });
        }

        function checkAuth() {
            //gapi.auth.authorize({
            //    client_id: OAUTH2_CLIENT_ID,
            //    scope: OAUTH2_SCOPES,
            //    immediate: true
            //}, handleAuthResult);
            //alert(token);
            
           
            handleAuthResult();
        }

        function handleAuthResult() {
            loadAPIClientInterfaces();
            //if (authResult) {
            //    console.log(authResult);
            //    loadAPIClientInterfaces();
            //} else {
            //    gapi.auth.authorize({
            //        client_id: OAUTH2_CLIENT_ID,
            //        scope: OAUTH2_SCOPES,
            //        immediate: true
            //        //response_type: 'id_token permission',
            //        //prompt: 'none'
            //    }, handleAuthResult);
            //}
        }

        function loadAPIClientInterfaces() {
            gapi.client.load("https://youtubeanalytics.googleapis.com/$discovery/rest?version=v2")
                .then(function () { console.log("GAPI client loaded for API"); 
                    handleAPILoaded(); },
                    function (err) { console.error("Error loading GAPI client for API", err); });
        }

        var token = @Html.Raw(Json.Encode(ViewBag.Token));
        function handleAPILoaded() {
            //alert(token);
            gapi.client.setToken({ access_token: token });
            getDataFromAPI();
        }

         var token = @Html.Raw(Json.Encode(ViewBag.Token));
  
        function execute(startDate, endDate, channelList) {
            return gapi.client.youtubeAnalytics.reports.query({
                "Access_token": token,
            "currency": "USD",
            "dimensions": "day",
            "endDate": endDate,
            "filters": "channel==" + channelList,
            "ids": "contentOwner==PuL6c--O0J3ZkNaWtTV1RA",
            "metrics": "estimatedRevenue,views,monetizedPlaybacks",
            "startDate": startDate,
            "startIndex": "1"
        })
            .then(function (response) {
            // Handle the results here (response.result has the parsed body).
                //console.log("Response", response.result);
                var date = [];
                var earnings = [];
                var views = [];
                var monetizedPlaybacks = [];
                $.each(response.result.rows, function (i, item) {
                    date.push(item[0]);
                    earnings.push(item[1]);
                    views.push(item[2]);
                    monetizedPlaybacks.push(item[3]);
                });
                estimatedEarningChart(date, earnings);
                ViewersChart(date, views);
                MonetizedPlaybacksChart(date, monetizedPlaybacks);
                execute1(startDate, endDate, channelList);

         },
            function (err) {console.error("Execute error", err); });
        }

        function execute1(startDate, endDate, channelList) {
            return gapi.client.youtubeAnalytics.reports.query({
                "Access_token": token,
                "currency": "USD",
                "dimensions": "country",
                "endDate": endDate,
                "filters": "channel==" + channelList,
                "ids": "contentOwner==PuL6c--O0J3ZkNaWtTV1RA",
                "metrics": "views",
                "sort": "-views",
                "startDate": startDate,
                "startIndex": "1"
            })
                .then(function (response) {
                    // Handle the results here (response.result has the parsed body).
                    // console.log("Response", response.result);
                    $("#customers tbody").empty();
                    $.each(response.result.rows, function (i, item) {
                        $("#customers tbody").append(`
                            <tr align="center">
                                <td>${ item[0]}</td>
                                <td>${ item[1] } Views </td>
                            </tr>
                        `);
                    });

                    execute2(startDate, endDate, channelList);
                },
                    function (err) { console.error("Execute error", err); });
        }

        function execute2(startDate, endDate, channelList) {
            return gapi.client.youtubeAnalytics.reports.query({
                "Access_token": token,
                "currency": "USD",
                "dimensions": "video",
                "endDate": endDate,
                "filters": "channel==" + channelList,
                "ids": "contentOwner==PuL6c--O0J3ZkNaWtTV1RA",
                "metrics": "estimatedRevenue,views,estimatedAdRevenue,estimatedRedPartnerRevenue,grossRevenue,adImpressions,cpm,playbackBasedCpm,monetizedPlaybacks",
                "startDate": startDate,
                "sort": "-estimatedRevenue",
                "maxResults": "30",
                "startIndex": "1"
            })
                .then(function (response) {
                    // Handle the results here (response.result has the parsed body).
                    //console.log("Response", response.result);
                    drawTable(response.result);
                   
                },
                    function (err) { console.error("Execute error", err); });
        }

        function setInitialDates() {
            var now = new Date();
            var day = ("0" + now.getDate()).slice(-2);
            var month = ("0" + (now.getMonth() + 1)).slice(-2);
            var today = now.getFullYear() + "-" + (month) + "-" + (day);
            $('#endDate').val(today);

            now.setDate(now.getDate() - 20);
            day = ("0" + now.getDate()).slice(-2);
            month = ("0" + (now.getMonth() + 1)).slice(-2);
            today = now.getFullYear() + "-" + (month) + "-" + (day);
            $('#startDate').val(today);

            document.getElementById("startDate").setAttribute("max", new Date().toISOString().split("T")[0]);
            document.getElementById("endDate").setAttribute("max", new Date().toISOString().split("T")[0]);
            document.getElementById("endDate").setAttribute("min", today);
        }
        function setDates() {
            document.getElementById("endDate").setAttribute("min", document.getElementById("startDate").value);
        }

        var videoTitle = null;
        var startDate = null;
        var endDate = null;
        function getDataFromAPI() {
            var start = new Date(document.getElementById("startDate").value);
            var end = new Date(document.getElementById("endDate").value);
            startDate = start.getFullYear() + "-" + ("0" + (start.getMonth() + 1)).slice(-2) + "-" + ("0" + start.getDate()).slice(-2);
            endDate = end.getFullYear() + "-" + ("0" + (end.getMonth() + 1)).slice(-2) + "-" + ("0" + end.getDate()).slice(-2);

            var channelId = @Html.Raw(Json.Encode(ViewBag.ChannelId));

            execute(startDate, endDate, channelId);
        }

        function estimatedEarningChart(dates, estimatedEarnings) {
            var total = Math.round(estimatedEarnings.reduce((a, b) => a + b, 0) * 100) / 100;
            $('#totalEarnings').text("$" + total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
            $('#myChartNEW').remove();
            $('#chartFirst').append('<canvas id="myChartNEW" height="80"> </canvas>');
            var ctx = $("#myChartNEW").get(0).getContext("2d");
            var myNewChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: "Estimated Earnings",
                            borderColor: "#ff0c00",
                            backgroundColor: "#f95f59",
                            data: estimatedEarnings
                        }
                    ]
                },
                options: {
                    responsive: true,
                    title: { display: true, text: '' },
                    legend: { position: 'bottom' },
                    scales: {
                        xAxes: [{ gridLines: { display: false }, display: true, scaleLabel: { display: false, labelString: '' } }],
                        yAxes: [{ gridLines: { display: false }, display: false, scaleLabel: { display: false, labelString: '' } }]
                    },
                }
            });
        }

        function ViewersChart(dates, views) {
            $('#totalViews').text("+" + views.reduce((a, b) => a + b, 0).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") );
            $('#myChartNEW1').remove();
            $('#chartFirst1').append('<canvas id="myChartNEW1" height="150"> </canvas>');
            var ctx = $("#myChartNEW1").get(0).getContext("2d");
            var myNewChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: "Views",
                            borderColor: "#ff0c00",
                            backgroundColor: "#f95f59",
                            data: views
                        }
                    ]
                },
                options: {
                    responsive: true,
                    title: { display: true, text: '' },
                    legend: { position: 'bottom' },
                    scales: {
                        xAxes: [{ gridLines: { display: false }, display: true, scaleLabel: { display: false, labelString: '' } }],
                        yAxes: [{ gridLines: { display: false }, display: false, scaleLabel: { display: false, labelString: '' } }]
                    },
                }
            });
        }

        function MonetizedPlaybacksChart(dates, MonetizedPlaybacks) {
            $('#totalMonetizedPlaybacks').text("+" + MonetizedPlaybacks.reduce((a, b) => a + b, 0).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
            $('#myChartNEW2').remove();
            $('#chartFirst2').append('<canvas id="myChartNEW2" height="150"> </canvas>');
            var ctx = $("#myChartNEW2").get(0).getContext("2d");
            var myNewChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: "Monetized Playbacks",
                            borderColor: "#ff0c00",
                            backgroundColor: "#f95f59",
                            data: MonetizedPlaybacks
                        }
                    ]
                },
                options: {
                    responsive: true,
                    title: { display: true, text: '' },
                    legend: { position: 'bottom' },
                    scales: {
                        xAxes: [{ gridLines: { display: false }, display: true, scaleLabel: { display: false, labelString: '' } }],
                        yAxes: [{ gridLines: { display: false }, display: false, scaleLabel: { display: false, labelString: '' } }]
                    },
                }
            });
    }

        function drawTable(result) {
            var apikey = @Html.Raw(Json.Encode(ViewBag.Key));
            $("#videos tbody").empty();
            var id = [];
            $.each(result.rows, function (i, item) {
                id.push(item[0]);
            });

            var ytApiKey = apikey;

            $.get("https://www.googleapis.com/youtube/v3/videos?part=snippet&id=" + id + "&key=" + ytApiKey, function (data) {
                //console.log(data);
                $.each(result.rows, function (i, item) {
                    $("#videos tbody").append(`
                            <tr align="center">
                                <td td align="left">${data.items[i].snippet.title}</td>
                                <td>$${ parseFloat(Math.round(item[1] * 100) / 100)}</td>
                                <td>${ item[2]}</td>
                                <td>$${ parseFloat(Math.round(item[3] * 100) / 100).toFixed(2)}</td>
                                <td>$${ parseFloat(Math.round(item[4] * 100) / 100).toFixed(2)}</td>
                                <td>$${ parseFloat(Math.round(item[5] * 100) / 100).toFixed(2)}</td>
                                <td>${ item[6]}</td>
                                <td>${ parseFloat(Math.round(item[7] * 100) / 100).toFixed(2)}</td>
                                <td>${ parseFloat(Math.round(item[8] * 100) / 100).toFixed(2)}</td>
                                <td>${ item[9]}</td>
                            </tr>
                        `);

                });
            });
        }

</script>
<script src="https://apis.google.com/js/client.js?onload=googleApiClientReady"></script>
<div class="main-panel">
    <div class="main-content">
        <div class="content-wrapper">
            <div class="row">
                <div class="col-lg-12">
                    <center>
                        <label style="font-size:30px; margin-bottom: 30px;">
                            <p style="font-size:22px; font-weight:bold"> User's Channel Details</p><br />
                            <p style="font-size:20px; font-weight:bold; color:red;"> @ViewBag.Name</p>
                        </label>
                    </center>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="col-sm-3">
                    </div>
                    <div class="col-sm-3">
                        <center>Start Date</center>
                        <input id="startDate" onblur="setDates()" class="form-control" type='date' />
                    </div>
                    <div class="col-sm-3">
                        <center>End Date</center>
                        <input id="endDate" class="form-control" type='date' />
                    </div>
                    <div class="col-sm-3">

                    </div>
                </div>
                <div class="col-lg-12">
                    <center>
                        <button onclick="getDataFromAPI()" style="width:30%;" class="btn btn-danger">Get Data</button>
                    </center>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-2">
                    <div class="col-lg-12">
                        <h5><b>Estimated Earnings</b></h5>
                    </div>
                    <div class="col-lg-12">
                        <center><label id="totalEarnings" style="margin-top:50px; font-family:'Century Gothic'; font-size:25px;" title="Total Earnings">Total</label></center>
                    </div>
                </div>
                <div class="col-lg-10">
                    <div id="chartFirst">
                        <canvas id="myChartNEW" height="80"> </canvas>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-top:30px;">
                <div class="col-lg-6">
                    <div class="col-lg-12">
                        <h5><b>Viewership</b></h5>
                    </div>
                    <div class="col-lg-12">
                        <center><label id="totalViews" style="margin-top:20px; font-family:'Century Gothic'; font-size:20px;" title="Total Views">Total</label></center>
                    </div>
                    <div class="col-lg-12">
                        <div id="chartFirst1">
                            <canvas id="myChartNEW1" height="80"> </canvas>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="col-lg-12">
                        <h5><b>Monetized Playbacks</b></h5>
                    </div>
                    <div class="col-lg-12">
                        <center><label id="totalMonetizedPlaybacks" style="margin-top:20px; font-family:'Century Gothic'; font-size:20px;" title="Total Monetized Playbacks">Total</label></center>
                    </div>
                    <div class="col-lg-12">
                        <div id="chartFirst2">
                            <canvas id="myChartNEW2" height="80"> </canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-top:30px;">
                <div class="col-lg-6">
                    <div class="col-lg-12">
                        <h5><b>Views/Country</b></h5>
                    </div>
                    <div class="col-lg-12" style="height:500px; overflow-y:scroll;">
                        <table id="customers" class="customers">
                            <thead>
                                <tr>
                                    <th>Country</th>
                                    <th>Views</th>
                                </tr>
                            </thead>
                            <tbody>

                            </tbody>
                            
                        </table>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="col-lg-12">
                        <h5><b>Views/Continent</b></h5>
                    </div>
                    <div class="col-lg-12">

                    </div>
                </div>
            </div>

            <div class="row" style="margin-top:30px;">

                <div class="col-lg-12">
                    <h5><b>Videos/Channel</b></h5>
                </div>
                <div class="col-lg-12" style="height:800px; overflow-y:scroll;">
                    <table id="videos" class="customers">
                        <thead>
                            <tr>
                                <th>Video</th>
                                <th>Revenue</th>
                                <th>Views</th>
                                <th>Ad Revenue</th>
                                <th>Red Partner Revenue</th>
                                <th>Gross Revenue</th>
                                <th>Ad Impressions</th>
                                <th>CPM</th>
                                <th>Playback CPM</th>
                                <th>Monetized Playbacks</th>
                            </tr>
                        </thead>
                        <tbody>

                        </tbody>
                        
                    </table>
                </div>
               
            </div>


        </div>
    </div>


</div>

